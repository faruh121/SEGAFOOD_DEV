import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8198367761:AAGAuZTsAK03Zori95Lxv36uhuMjSCis3mA"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ADMIN_ID = 1186792039  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
users = {}  # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: {"role": "buyer/seller/admin", "name": "", "contact": ""}}
menu =  menu_data = [ 
        {"name": "–ß–µ–±—É—Ä–µ–∫–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "price_500g": 280, "price_100g": 56}, 
        {"name": "–ß–µ–±—É—Ä–µ–∫–∏ —Å –∫—É—Ä–∏—Ü–µ–π", "price_500g": 260, "price_100g": 52}, 
        {"name": "–ú–∞–Ω—Ç—ã —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "price_500g": 330, "price_100g": 66}, 
        {"name": "–ú–∞–Ω—Ç—ã –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Ç—ã–∫–≤–æ–π", "price_500g": 300, "price_100g": 60}, 
        {"name": "–ú–∞–Ω—Ç—ã –º—è—Å–æ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "price_500g": 300, "price_100g": 60}, 
        {"name": "–¢–µ—Ñ—Ç–µ–ª–∏ –≥–æ–≤—è–¥–∏–Ω–∞", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ì–æ–ª—É–±—Ü—ã", "price_500g": 350, "price_100g": 70}, 
        {"name": "–î–æ–ª–º–∞", "price_500g": 380, "price_100g": 76}, 
        {"name": "–°–∞–º—Å–∞ –≥–æ–≤—è–¥–∏–Ω–∞", "price_500g": 370, "price_100g": 74}, 
        {"name": "–°–∞–º—Å–∞ —Å –∫—É—Ä–∏—Ü–µ–π", "price_500g": 340, "price_100g": 68}, 
        {"name": "–•–∏–Ω–∫–∞–ª–∏ –≥–æ–≤—è–¥–∏–Ω–∞", "price_500g": 350, "price_100g": 70}, 
        {"name": "–•–∏–Ω–∫–∞–ª–∏ –≥–æ–≤—è–¥–∏–Ω–∞ —Å–≤–∏–Ω–∏–Ω–∞", "price_500g": 330, "price_100g": 66}, 
        {"name": "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "price_500g": 240, "price_100g": 48}, 
        {"name": "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "price_500g": 250, "price_100g": 50}, 
        {"name": "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞–ø—É—Å—Ç–æ–π", "price_500g": 250, "price_100g": 50}, 
        {"name": "–ü–µ–ª—å–º–µ–Ω–∏ —Å –∫—É—Ä–∏—Ü–µ–π", "price_500g": 310, "price_100g": 62}, 
        {"name": "–ü–µ–ª—å–º–µ–Ω–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ë–ª–∏–Ω—ã", "price_500g": 200, "price_100g": 40}, 
        {"name": "–ë–ª–∏–Ω—ã —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ë–ª–∏–Ω—ã —Å –¥–∂–µ–º–æ–º", "price_500g": 390, "price_100g": 78}, 
        {"name": "–ë–ª–∏–Ω—ã —Å –º—è—Å–æ–º", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ë–ª–∏–Ω—ã —Å –≤–∞—Ä—ë–Ω–æ–π —Å–≥—É—â—ë–Ω–∫–æ–π", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ü–∏—Ä–æ–∂–∫–∏ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "price_500g": 300, "price_100g": 60}, 
        {"name": "–ü–∏—Ä–æ–∂–∫–∏ —Å –ª—É–∫–æ–º –∏ —è–π—Ü–æ–º", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ü–∏—Ä–æ–∂–∫–∏ —Å –º—è—Å–æ–º", "price_500g": 350, "price_100g": 70}, 
    ] 
seller_id = None  # ID –ø—Ä–æ–¥–∞–≤—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        role = "admin" if user_id == ADMIN_ID else "buyer"  # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        users[user_id] = {"role": role, "name": "", "contact": ""}
    role = users[user_id]["role"]

    if role == "admin":
        await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_admin_menu())
    elif role == "seller":
        await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_menu())


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üçΩÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data="menu")
    builder.button(text="üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="set_contact")
    return builder.as_markup()


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é
def create_admin_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data="menu")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")
    builder.button(text="üìù –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_item")
    builder.button(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data="set_seller")
    return builder.as_markup()


# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def create_menu_keyboard():
    builder = InlineKeyboardBuilder()
    for index, item in enumerate(menu):
        builder.adjust(1)
        builder.button(
            text=f"{item['name']} ({item['price_100g']} —Ä—É–±/100–≥)",
            callback_data=f"order_{index}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    return builder.as_markup()

@dp.callback_query(lambda call: call.data == "menu")
async def show_menu(call: CallbackQuery):
    await call.message.edit_text("üìã *–ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤:*\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", 
                                 parse_mode="Markdown", 
                                 reply_markup=create_menu_keyboard())


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda call: call.data == "main_menu")
async def main_menu_handler(call: CallbackQuery):
    role = users[call.from_user.id]["role"]
    if role == "admin":
        await call.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_menu())
    else:
        await call.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda call: call.data.startswith("order_"))
async def order_handler(call: CallbackQuery):
    index = int(call.data.split("_")[1])
    item = menu[index]
    user_id = call.from_user.id

    if not users[user_id]["contact"]:
        await call.message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /set_contact, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.")
        return

    contact = users[user_id]["contact"]
    seller_message = f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n" \
                     f"üì¶ –¢–æ–≤–∞—Ä: {item['name']}\n" \
                     f"üí∞ –¶–µ–Ω–∞ –∑–∞ 100–≥: {item['price_100g']} —Ä—É–±\n\n" \
                     f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:\n" \
                     f"–ò–º—è: {users[user_id]['name']}\n" \
                     f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}"

    if seller_id:
        await bot.send_message(chat_id=seller_id, text=seller_message, parse_mode="Markdown")
        await call.message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
    else:
        await call.message.answer("‚ö†Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda call: call.data == "set_contact")
async def set_contact_handler(call: CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω):")


@dp.message()
async def save_contact(message: Message):
    user_id = message.from_user.id
    if user_id in users and not users[user_id]["contact"]:
        users[user_id]["name"] = message.text.split()[0]
        users[user_id]["contact"] = message.text
        await message.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.")
    else:
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä
@dp.callback_query(lambda call: call.data == "add_item")
async def add_item_handler(call: CallbackQuery):
    if users[call.from_user.id]["role"] != "admin":
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ù–∞–∑–≤–∞–Ω–∏–µ;–¶–µ–Ω–∞ –∑–∞ 500–≥;–¶–µ–Ω–∞ –∑–∞ 100–≥`", parse_mode="Markdown")


@dp.message()
async def process_new_item(message: Message):
    if users[message.from_user.id]["role"] == "admin" and ";" in message.text:
        try:
            name, price_500g, price_100g = message.text.split(";")
            menu.append({"name": name.strip(), "price_500g": float(price_500g), "price_100g": float(price_100g)})
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä {name.strip()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é.")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: –ù–∞–∑–≤–∞–Ω–∏–µ;–¶–µ–Ω–∞ –∑–∞ 500–≥;–¶–µ–Ω–∞ –∑–∞ 100–≥")


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä
@dp.callback_query(lambda call: call.data == "delete_item")
async def delete_item_handler(call: CallbackQuery):
    if users[call.from_user.id]["role"] != "admin":
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for index, item in enumerate(menu):
        builder.button(text=f"–£–¥–∞–ª–∏—Ç—å: {item['name']}", callback_data=f"delete_{index}")
    builder.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="main_menu")

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())


@dp.callback_query(lambda call: call.data.startswith("delete_"))
async def confirm_delete_item(call: CallbackQuery):
    if users[call.from_user.id]["role"] != "admin":
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return

    index = int(call.data.split("_")[1])
    item = menu.pop(index)
    await call.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä '{item['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")


# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query(lambda call: call.data == "set_seller")
async def set_seller_handler(call: CallbackQuery):
    if users[call.from_user.id]["role"] != "admin":
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:")


@dp.message()
async def process_set_seller(message: Message):
    if users[message.from_user.id]["role"] == "admin":
        try:
            global seller_id
            seller_id = int(message.text)
            if seller_id not in users:
                users[seller_id] = {"role": "seller", "name": "", "contact": ""}
            else:
                users[seller_id]["role"] = "seller"
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {seller_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º.")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
@dp.message(Command("info"))
async def info_handler(message: Message):
    commands_list = """
üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/info - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/set_admin <ID> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
/set_seller <ID> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
/set_buyer <ID> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/contact - –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""
    await message.answer(commands_list, parse_mode="Markdown")

import asyncio 
import sqlite3 
from aiogram import Bot, Dispatcher 
from aiogram.types import Message, CallbackQuery 
from aiogram.filters import Command 
from aiogram.utils.keyboard import InlineKeyboardBuilder 
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ 
BOT_TOKEN = "8198367761:AAGAuZTsAK03Zori95Lxv36uhuMjSCis3mA"   
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ 
bot = Bot(token=BOT_TOKEN) 
dp = Dispatcher() 
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
conn = sqlite3.connect("shop.db") 
cursor = conn.cursor() 
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç) 
cursor.execute(""" 
CREATE TABLE IF NOT EXISTS users ( 
    user_id INTEGER PRIMARY KEY, 
    role TEXT DEFAULT 'buyer'  -- 'admin', 'seller', 'buyer' 
) 
""") 
cursor.execute(""" 
CREATE TABLE IF NOT EXISTS menu ( 
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    name TEXT NOT NULL, 
    price_500g REAL NOT NULL, 
    price_100g REAL NOT NULL 
) 
""") 
conn.commit() 
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é 
def initialize_menu(): 
    menu_data = [ 
        {"name": "–ß–µ–±—É—Ä–µ–∫–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "price_500g": 280, "price_100g": 56}, 
        {"name": "–ß–µ–±—É—Ä–µ–∫–∏ —Å –∫—É—Ä–∏—Ü–µ–π", "price_500g": 260, "price_100g": 52}, 
        {"name": "–ú–∞–Ω—Ç—ã —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "price_500g": 330, "price_100g": 66}, 
        {"name": "–ú–∞–Ω—Ç—ã –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Ç—ã–∫–≤–æ–π", "price_500g": 300, "price_100g": 60}, 
        {"name": "–ú–∞–Ω—Ç—ã –º—è—Å–æ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "price_500g": 300, "price_100g": 60}, 
        {"name": "–¢–µ—Ñ—Ç–µ–ª–∏ –≥–æ–≤—è–¥–∏–Ω–∞", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ì–æ–ª—É–±—Ü—ã", "price_500g": 350, "price_100g": 70}, 
        {"name": "–î–æ–ª–º–∞", "price_500g": 380, "price_100g": 76}, 
        {"name": "–°–∞–º—Å–∞ –≥–æ–≤—è–¥–∏–Ω–∞", "price_500g": 370, "price_100g": 74}, 
        {"name": "–°–∞–º—Å–∞ —Å –∫—É—Ä–∏—Ü–µ–π", "price_500g": 340, "price_100g": 68}, 
        {"name": "–•–∏–Ω–∫–∞–ª–∏ –≥–æ–≤—è–¥–∏–Ω–∞", "price_500g": 350, "price_100g": 70}, 
        {"name": "–•–∏–Ω–∫–∞–ª–∏ –≥–æ–≤—è–¥–∏–Ω–∞ —Å–≤–∏–Ω–∏–Ω–∞", "price_500g": 330, "price_100g": 66}, 
        {"name": "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "price_500g": 240, "price_100g": 48}, 
        {"name": "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "price_500g": 250, "price_100g": 50}, 
        {"name": "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞–ø—É—Å—Ç–æ–π", "price_500g": 250, "price_100g": 50}, 
        {"name": "–ü–µ–ª—å–º–µ–Ω–∏ —Å –∫—É—Ä–∏—Ü–µ–π", "price_500g": 310, "price_100g": 62}, 
        {"name": "–ü–µ–ª—å–º–µ–Ω–∏ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ë–ª–∏–Ω—ã", "price_500g": 200, "price_100g": 40}, 
        {"name": "–ë–ª–∏–Ω—ã —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ë–ª–∏–Ω—ã —Å –¥–∂–µ–º–æ–º", "price_500g": 390, "price_100g": 78}, 
        {"name": "–ë–ª–∏–Ω—ã —Å –º—è—Å–æ–º", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ë–ª–∏–Ω—ã —Å –≤–∞—Ä—ë–Ω–æ–π —Å–≥—É—â—ë–Ω–∫–æ–π", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ü–∏—Ä–æ–∂–∫–∏ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "price_500g": 300, "price_100g": 60}, 
        {"name": "–ü–∏—Ä–æ–∂–∫–∏ —Å –ª—É–∫–æ–º –∏ —è–π—Ü–æ–º", "price_500g": 350, "price_100g": 70}, 
        {"name": "–ü–∏—Ä–æ–∂–∫–∏ —Å –º—è—Å–æ–º", "price_500g": 350, "price_100g": 70}, 
    ] 
    cursor.executemany(""" 
    INSERT OR IGNORE INTO menu (name, price_500g, price_100g) VALUES (?, ?, ?) 
    """, [(item["name"], item["price_500g"], item["price_100g"]) for item in menu_data]) 
    conn.commit() 
# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–æ–¥–∏–Ω —Ä–∞–∑) 
initialize_menu() 
# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ 
def add_user(user_id, role="buyer"): 
    cursor.execute("INSERT OR IGNORE INTO users (user_id, role) VALUES (?, ?)", (user_id, role)) 
    conn.commit() 
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
def get_user_role(user_id): 
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,)) 
    result = cursor.fetchone() 
    return result[0] if result else None 
# –ö–æ–º–∞–Ω–¥–∞ /set_admin 
@dp.message(Command("set_admin")) 
async def set_admin_handler(message: Message): 
    role = get_user_role(message.from_user.id) 
    if role != "admin": 
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!") 
        return 
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    if len(message.text.split()) != 2: 
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_admin <user_id>") 
        return 
    user_id = int(message.text.split()[1]) 
    cursor.execute("INSERT OR IGNORE INTO users (user_id, role) VALUES (?, 'admin')", (user_id,)) 
    conn.commit() 
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.") 
# –ö–æ–º–∞–Ω–¥–∞ /start 
@dp.message(Command("start")) 
async def start_handler(message: Message): 
    add_user(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É 
    role = get_user_role(message.from_user.id) 
    if role == "admin": 
        await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_admin_menu()) 
    elif role == "seller": 
        await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.") 
    else: 
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_menu()) 
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è 
def create_main_menu(): 
    builder = InlineKeyboardBuilder() 
    builder.button(text="üìã –ú–µ–Ω—é", callback_data="menu") 
    builder.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart") 
    return builder.as_markup() 
# –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ 
def create_admin_menu(): 
    builder = InlineKeyboardBuilder() 
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item") 
    builder.button(text="üìù –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_item") 
    builder.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users") 
    builder.button(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data="menu") 
    return builder.as_markup() 
# –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@dp.callback_query(lambda call: call.data == "menu") 
async def show_menu(call: CallbackQuery): 
    items = get_menu() 
    if not items: 
        await call.message.edit_text("–ú–µ–Ω—é –ø—É—Å—Ç–æ.") 
        return 
    text = "üìã *–ú–µ–Ω—é:*\n\n" 
    builder = InlineKeyboardBuilder() 
    for item in items: 
        text += f"{item[1]} - {item[2]} —Ä—É–±/500–≥ ({item[3]} —Ä—É–±/100–≥)\n" 
        builder.button(text=f"–í—ã–±—Ä–∞—Ç—å: {item[1]}", callback_data=f"item_{item[0]}") 
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu") 
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=builder.as_markup()) 
# –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä 
@dp.callback_query(lambda call: call.data == "add_item") 
async def add_item_handler(call: CallbackQuery): 
    role = get_user_role(call.from_user.id) 
    if role != "admin": 
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True) 
        return 
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ;–¶–µ–Ω–∞ –∑–∞ 500–≥;–¶–µ–Ω–∞ –∑–∞ 100–≥") 
@dp.message() 
async def process_admin_input(message: Message): 
    role = get_user_role(message.from_user.id) 
    if role == "admin" and ";" in message.text: 
        try: 
            name, price_500g, price_100g = message.text.split(";") 
            add_menu_item(name.strip(), float(price_500g), float(price_100g)) 
            await message.answer(f"–¢–æ–≤–∞—Ä {name.strip()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é.") 
        except ValueError: 
            await message.answer("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: –ù–∞–∑–≤–∞–Ω–∏–µ;–¶–µ–Ω–∞ –∑–∞ 500–≥;–¶–µ–Ω–∞ –∑–∞ 100–≥") 
# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω) 
@dp.callback_query(lambda call: call.data == "delete_item") 
async def delete_item_handler(call: CallbackQuery): 
    role = get_user_role(call.from_user.id) 
    if role != "admin": 
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True) 
        return 
    items = get_menu() 
    if not items: 
        await call.message.edit_text("–ú–µ–Ω—é –ø—É—Å—Ç–æ.") 
        return 
    builder = InlineKeyboardBuilder() 
    for item in items: 
        builder.button(text=f"–£–¥–∞–ª–∏—Ç—å: {item[1]}", callback_data=f"delete_{item[0]}") 
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu") 
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup()) 
@dp.callback_query(lambda call: call.data.startswith("delete_")) 
async def delete_item_confirm(call: CallbackQuery): 
    role = get_user_role(call.from_user.id) 
    if role != "admin": 
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True) 
        return 
    item_id = int(call.data.split("_")[1]) 
    delete_menu_item(item_id) 
    await call.message.edit_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.") 
# –ü–æ–ª—É—á–∏—Ç—å –≤—Å—ë –º–µ–Ω—é 
def get_menu(): 
    cursor.execute("SELECT * FROM menu") 
    return cursor.fetchall() 
# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä 
def add_menu_item(name, price_500g, price_100g): 
    cursor.execute("INSERT INTO menu (name, price_500g, price_100g) VALUES (?, ?, ?)", (name, price_500g, price_100g)) 
    conn.commit() 
# –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–µ–Ω—é 
def delete_menu_item(item_id): 
    cursor.execute("DELETE FROM menu WHERE id = ?", (item_id,)) 
    conn.commit() 
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 
async def main(): 
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...") 
    await dp.start_polling(bot) 
if __name__ == "__main__": 
    asyncio.run(main())